#!/bin/sh

#Setup optimization flags.  This significantly improves performance.

#On Windows this script does *not* need to be run.  On Windows,
#Makevars.win should simply be used because we can assume that we are
#using the mingw32 compiler

# -fstrict-aliasing is added for OS X (already included in the Linux gcc -O2 option
# does no harm on Linux

CXX=`"${R_HOME}/bin/R" CMD config CXX`

echo $CXX | grep g++ > /dev/null 2>&1
if [ "$?" -eq "0" ]; then
 CXXFLAGS="-O3 -ffast-math -funroll-loops -fexpensive-optimizations -fstrict-aliasing"
 echo "CXXFLAGS=$CXXFLAGS" > src/Makefile
 echo "PKG_CXXLDFLAGS=$PKG_CXXLDFLAGS" >> src/Makefile
 cat src/makefile.in >> src/Makefile

# are we on osx?
# if so, don't compile our own cblas headers
# and use dmalloc
UNAME=`uname -a`
echo $UNAME | grep Darwin > /dev/null 2>&1
if [ "$?" -eq "0" ]; then
 CXXFLAGS="-O3 -ffast-math -funroll-loops -fexpensive-optimizations -fstrict-aliasing"
 echo "CXXFLAGS=$CXXFLAGS" > src/Makefile
 echo "PKG_CXXLDFLAGS=$PKG_CXXLDFLAGS" >> src/Makefile
 cat src/makefile.osx.in >> src/Makefile
 cp inst/malloc.c src/malloc.c
fi

fi

#NOTE: On g5 machines with OS X the following CXXFLAGS generates
#significantly faster code:
#PKG_CXXFLAGS="-fast"
